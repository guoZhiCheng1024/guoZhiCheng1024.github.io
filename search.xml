<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyAPI项目（三）</title>
      <link href="/2023/04/09/MyAPI(%E4%B8%89)/"/>
      <url>/2023/04/09/MyAPI(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="MyAPI-三"><a href="#MyAPI-三" class="headerlink" title="MyAPI(三)"></a>MyAPI(三)</h1><h2 id="API签名认证"><a href="#API签名认证" class="headerlink" title="API签名认证"></a>API签名认证</h2><ol><li><p>签发签名</p></li><li><p>使用签名（校验签名）</p></li></ol><p>为什么需要？        </p><p>保证安全，不随便一个人就可以调用</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>通过 http request  header  头传递参数</p><p>参数1  accessKey  调用的标识（复杂 无序 无规则）</p><p>参数2  secretKey   密匙  （复杂 无序 无规则）  <strong>该参数不传递，不能在发请求的时候传递</strong> <strong>（在请求头中传递   可能会被拦截）</strong></p><p>参数3   用户请求参数</p><p>参数4   sign签名</p><p>参数5   nonce随机数   只能用一次   服务端保存用过的随机数</p><p>参数6   timestamp  时间戳，校验它的有效期</p><p>类似  用户名和密码   ak，sk是无状态的</p><h3 id="在数据库中加入字段"><a href="#在数据库中加入字段" class="headerlink" title="在数据库中加入字段"></a>在数据库中加入字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`accessKey` varchar(512) not null comment &#x27;accessKey&#x27;,</span><br><span class="line">`secretKey` varchar(512) not null comment &#x27;secretKey&#x27;,</span><br></pre></td></tr></table></figure><p>传递流程</p><ol><li><p>Main  （客户端） 中输入 accessKey和secretKey</p></li><li><p>根据accessKey和secretKey创建对象   </p></li><li><p>然后将accessKey和secretKey放在请求头中传递  使用 addHeaders（）方法</p></li><li><p>收到请求之后  在HttpServletRequest request 中获取accessKey和secretKey   使用request.getHeader（”accessKey”）;   request.getHeader（”secretKey”）;</p><p><strong>正确的accessKey和secretKey在类中已经提前放入 Map&lt;String,String&gt;集合中</strong></p></li><li><p>最后对accessKey和secretKey进行校验   正确了之后再return</p></li></ol><h3 id="使用加密方式"><a href="#使用加密方式" class="headerlink" title="使用加密方式"></a>使用加密方式</h3><p>如果secretKey直接发在请求头中传递   可能会被拦截  这样的会secretKey就直接泄露了</p><p><strong>所以我们根据密钥，生成签名sign</strong></p><h4 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h4><p>对称加密    不对称加密    md5签名加密（不可解密）</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p><strong>用户参数 + 密钥   &#x3D;&gt;签名算法&#x3D;&gt; 不可解密的值</strong></p><h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><p>服务端用一样的用户参数和算法生成签名   只要与用户传的一致，就可以通过</p><h4 id="防止重放"><a href="#防止重放" class="headerlink" title="防止重放"></a>防止重放</h4><p>加随机数  只能用一次</p><p>服务端保存用过的随机数</p><p>加 timestamp 时间戳   校验它的有效期</p><h3 id="手动实现签名算法"><a href="#手动实现签名算法" class="headerlink" title="手动实现签名算法"></a>手动实现签名算法</h3><h4 id="1-创建签名工具"><a href="#1-创建签名工具" class="headerlink" title="1. 创建签名工具"></a>1. 创建签名工具</h4><p>前端发送和后端校验时都需要用到    所以可以创建一个公共的工具类</p><ol><li>创建utils包</li><li>封装SignUtils类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.crypto.digest.DigestAlgorithm;</span><br><span class="line">import cn.hutool.crypto.digest.Digester;</span><br><span class="line"></span><br><span class="line">public class SignUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getSign(String boby,String secretKey)&#123;</span><br><span class="line">        Digester md5 =new Digester(DigestAlgorithm.SHA256);</span><br><span class="line">        String content =boby + &#x27;.&#x27;+secretKey;</span><br><span class="line">        return md5.digestHex(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在GuoApiClint中创建getHeaderMap  将我们需要的参数放进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private Map&lt;String,String&gt; getHeaderMap(String body)&#123;</span><br><span class="line">       HashMap&lt;String,String&gt; hashMap = new HashMap&lt;&gt;();</span><br><span class="line">       hashMap.put(&quot;accessKey&quot;,accessKey);</span><br><span class="line">       //不能把密匙发给后端  容易在请求时  被拦截</span><br><span class="line">//       hashMap.put(&quot;secretKey&quot;,secretKey);</span><br><span class="line">       //随机数 nonce</span><br><span class="line">       hashMap.put(&quot;nonce&quot;, RandomUtil.randomNumbers(4));</span><br><span class="line">       //request 的body 信息</span><br><span class="line">       hashMap.put(&quot;body&quot;,body);</span><br><span class="line">       //时间戳   timestamp 用于校验有效性</span><br><span class="line">       hashMap.put(&quot;timestamp&quot;,String.valueOf(System.currentTimeMillis()));</span><br><span class="line">       hashMap.put(&quot;sign&quot;,getSign(body,secretKey));</span><br><span class="line">       return hashMap;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>在GuoApiClint中进行参数的校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/user&quot;)</span><br><span class="line">public String getUsernameByPost(@RequestBody User user, HttpServletRequest request)&#123;</span><br><span class="line">    String accessKey =request.getHeader(&quot;accessKey&quot;);</span><br><span class="line">    String nonce =request.getHeader(&quot;nonce&quot;);</span><br><span class="line">    String timestamp =request.getHeader(&quot;timestamp&quot;);</span><br><span class="line">    String sign =request.getHeader(&quot;sign&quot;);</span><br><span class="line">    String body =request.getHeader(&quot;body&quot;);</span><br><span class="line">    //todo 实际情况是先从数据库中拿出 accessKey  及 “guoshao”</span><br><span class="line">    if (!accessKey.equals(&quot;guoshao&quot;))&#123;</span><br><span class="line">        throw new RuntimeException(&quot;没有权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //todo 校验随机数</span><br><span class="line">    // if(随机数不一致)&#123;  throw new RuntimeException(&quot;没有权限&quot;); &#125;</span><br><span class="line"></span><br><span class="line">    //todo 校验时间戳 时间不超过5分钟</span><br><span class="line">    // if(timestamp超过5分钟)&#123; throw new RuntimeException(&quot;权限过期&quot;); &#125;</span><br><span class="line"></span><br><span class="line">    //secretKey 是从数据库获取 及 &quot;abcdef&quot;</span><br><span class="line">    if (!sign.equals(SignUtils.getSign(body,&quot;abcdef&quot;)))&#123;</span><br><span class="line">        throw new RuntimeException(&quot;没有权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;POST 你的名字&quot; +user.getUsername();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考<a href="%5B%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://space.bilibili.com/12890453)">@鱼皮</a>的yuapi</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyAPI项目（二）</title>
      <link href="/2023/04/09/MyAPI(%E4%BA%8C)/"/>
      <url>/2023/04/09/MyAPI(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="MyAPI（二）"><a href="#MyAPI（二）" class="headerlink" title="MyAPI（二）"></a>MyAPI（二）</h1><h2 id="1-前端界面优化"><a href="#1-前端界面优化" class="headerlink" title="1.前端界面优化"></a>1.前端界面优化</h2><p>对ant design pro 前端显示界面进行优化</p><h3 id="在路由表中修改界面-设置成我们的接口管理-页面"><a href="#在路由表中修改界面-设置成我们的接口管理-页面" class="headerlink" title="在路由表中修改界面  设置成我们的接口管理  页面"></a>在路由表中修改界面  设置成我们的接口管理  页面</h3><h2 id="2-后端创建模拟接口（对外部开放）"><a href="#2-后端创建模拟接口（对外部开放）" class="headerlink" title="2.后端创建模拟接口（对外部开放）"></a>2.后端创建模拟接口（对外部开放）</h2><h3 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h3><p>GET接口   POST接口(URL传递)    POST（传递user对象   json返回）</p><h3 id="新建Spring-Boot-项目"><a href="#新建Spring-Boot-项目" class="headerlink" title="新建Spring Boot 项目"></a>新建Spring Boot 项目</h3><p>springboot 2.7.10</p><p>添加 ：   Spring Web</p><p>Lombok</p><p>Spring Boot DevTools</p><p>然后maven加载依赖</p><p>配置application.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8123</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /api</span><br></pre></td></tr></table></figure><h3 id="创建controller文件夹"><a href="#创建controller文件夹" class="headerlink" title="创建controller文件夹"></a>创建controller文件夹</h3><p>创建  NameController类</p><p>分别模拟三个接口</p><p>GET接口   POST接口(URL传递)    POST（传递user对象   json返回）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.yupi.myapiinterface.controller;</span><br><span class="line"></span><br><span class="line">import com.yupi.myapiinterface.model.User;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 查询API的名称</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/name&quot;)</span><br><span class="line">public class NameController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/&quot;)</span><br><span class="line">    public String getNameByGet(String name)&#123;</span><br><span class="line">        return &quot;GET 你的名字&quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(&quot;/&quot;)</span><br><span class="line">    public String getNameByPost(@RequestParam String name)&#123;</span><br><span class="line">        return &quot;POST 你的名字&quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(&quot;/user&quot;)</span><br><span class="line">    public String getUsernameByPost(@RequestBody User user)&#123;</span><br><span class="line">        return &quot;POST 你的名字&quot; +user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@RestController （spring4  加入的新注解） 检测到请求之后   在此类中集中处理   与类中的方法进行匹配</strong></p><p><strong>Controller包含   RestController 和RequestBody</strong>  </p><ul><li><p><strong>@Controller 一般应用在有返回界面的应用场景下.</strong></p><p><strong>例如，管理后台使用了 thymeleaf 作为模板开发，需要从后台直接返回 Model 对象到前台，那么这时候就需要使用 @Controller 来注解。</strong></p></li><li><p><strong>@RestController 如果只是接口，那么就用 RestController 来注解.</strong></p><p><strong>例如前端页面全部使用了 Html、Jquery来开发，通过 Ajax 请求服务端接口，那么接口就使用 @RestController 统一注解。</strong></p></li></ul><p>@RequestParam   是使用URL传递参数</p><p>@RequesBody  是使用传递User对象参数   json返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    private String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lombok.Data        Data注解   ：@Data 注解的主要作用是提高代码的简洁，使用这个注解可以省去代码中大量的get()、 set()、 toString()等方法；</p><p>使用@Data  注解之后  不许要自己在写   set  get  toString方法</p><h2 id="2-调用接口"><a href="#2-调用接口" class="headerlink" title="2.调用接口"></a>2.调用接口</h2><p>开发者一般不通过导航栏调用，一般是后端调用   前端调用不安全</p><h3 id="创建clint包"><a href="#创建clint包" class="headerlink" title="创建clint包"></a>创建clint包</h3><h3 id="HTTP调用方法"><a href="#HTTP调用方法" class="headerlink" title="HTTP调用方法:"></a>HTTP调用方法:</h3><ol><li>HttpClient</li><li>RestTemplate</li><li>第三方库 （OKHttp，Hutool）</li></ol><h3 id="使用Hutool调用"><a href="#使用Hutool调用" class="headerlink" title="使用Hutool调用"></a>使用Hutool调用</h3><ol><li><p>进入Hutool 参考文档  <a href="https://hutool.cn/docs/#/">https://hutool.cn/docs/#/</a></p></li><li><p>找到安装   然后添加maven 依赖</p><p><strong><dependency></strong>    </p><p><strong><groupId>cn.hutool</groupId></strong>    </p><p>**<artifactId>**hutool-all</artifactId>    </p><p>**<version>**5.8.16</version></p><p><strong></dependency></strong></p></li><li><p>在clint包创建 API封装类    GuoApiClint类</p></li></ol><p>​根据HttpUtil 文档进行使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.yupi.myapiinterface.clint;</span><br><span class="line"></span><br><span class="line">import cn.hutool.http.HttpRequest;</span><br><span class="line">import cn.hutool.http.HttpUtil;</span><br><span class="line">import cn.hutool.json.JSONUtil;</span><br><span class="line">import com.yupi.myapiinterface.model.User;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public class GuoApiClint &#123;</span><br><span class="line"></span><br><span class="line">    public String getNameByGet(String name)&#123;</span><br><span class="line">        //可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span><br><span class="line">        HashMap&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</span><br><span class="line">        paramMap.put(&quot;name&quot;, name);</span><br><span class="line">        String result= HttpUtil.get(&quot;http://localhost:8123/api/name/&quot;, paramMap);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getNameByPost(@RequestParam String name)&#123;</span><br><span class="line">        //可以单独传入http参数，这样参数会自动做URL编码，拼接在URL中</span><br><span class="line">        HashMap&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</span><br><span class="line">        paramMap.put(&quot;name&quot;, name);</span><br><span class="line">        String result= HttpUtil.post(&quot;http://localhost:8123/api/name/&quot;, paramMap);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getUsernameByPost(@RequestBody User user)&#123;</span><br><span class="line">        String json = JSONUtil.toJsonStr(user);</span><br><span class="line">        String result2 = HttpRequest.post(&quot;http://localhost:8123/api/name/user&quot;)</span><br><span class="line">                .body(json)</span><br><span class="line">                .execute().body();</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">        return result2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>创建Main方法   调用GuoApiClint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.yupi.myapiinterface;</span><br><span class="line"></span><br><span class="line">import com.yupi.myapiinterface.clint.GuoApiClint;</span><br><span class="line">import com.yupi.myapiinterface.model.User;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        GuoApiClint guoApiClint =new GuoApiClint();</span><br><span class="line">        guoApiClint.getNameByGet(&quot;guo&quot;);</span><br><span class="line">        guoApiClint.getNameByPost(&quot;guo2&quot;);</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setUsername(&quot;guo3&quot;);</span><br><span class="line">        guoApiClint.getUsernameByPost(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考<a href="%5B%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://space.bilibili.com/12890453)">@鱼皮</a>的yuapi</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyAPI项目（四）</title>
      <link href="/2023/04/09/MyAPI(%E5%9B%9B)/"/>
      <url>/2023/04/09/MyAPI(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="MyAPI-四"><a href="#MyAPI-四" class="headerlink" title="MyAPI(四)"></a>MyAPI(四)</h1><p>前文中的手动开发还是有点复杂</p><p>对于开发者来说应该只需要关系，自己需要调用那些接口，传递什么参数</p><p>密钥是什么   就能够使用</p><p>所以，<strong>我们可以开发一个便于开发者使用的SDK</strong></p><p>开发starter的好处    开发者引入之后，可以直接在application.yml中写配置，自动创建客户端</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建 Spring Initializr项目  myapi-sdk</p><p>springboot 2.7.10   </p><p>sdk 8</p><p>加入依赖：Lombok   和   Spring Configuration Processor（生成配置文件的代码补全）</p><h2 id="开发自己的简易SDK"><a href="#开发自己的简易SDK" class="headerlink" title="开发自己的简易SDK"></a>开发自己的简易SDK</h2><ol><li>配置版本为0.0.1</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;com.guoAPI&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;myapi-sdk&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">&lt;name&gt;myapi-sdk&lt;/name&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>删除 <build>标签内容（下面内容删除）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;excludes&gt;</span><br><span class="line">                    &lt;exclude&gt;</span><br><span class="line">                        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                    &lt;/exclude&gt;</span><br><span class="line">                &lt;/excludes&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除 MyapiSdkApplication  类</p></li><li><p>创建Config配置类   GuoApiClientConfig</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.guoapi.myapisdk;</span><br><span class="line"></span><br><span class="line">import com.guoapi.myapisdk.clint.GuoApiClint;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Configuration</span><br><span class="line">@ConfigurationProperties(&quot;guo.client&quot;)</span><br><span class="line">@ComponentScan</span><br><span class="line">public class GuoApiClientConfig &#123;</span><br><span class="line"></span><br><span class="line">    private String accessKey;</span><br><span class="line"></span><br><span class="line">    private String secretKey;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public GuoApiClint guoApiClint()&#123;</span><br><span class="line">        return new GuoApiClint(accessKey,secretKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在resources包中创建META-INF 包</p><p>创建spring.factories</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#spring boot starter</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.guoapi.myapisdk.GuoApiClientConfig</span><br></pre></td></tr></table></figure></li></ol><p>org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;</p><p>等号后面为4中写的配置类路径</p><ol start="6"><li>最后使用maven  中的install  打包    看到BUILD SUCCESS  及为成功</li></ol><h2 id="测试自己的SDK"><a href="#测试自己的SDK" class="headerlink" title="测试自己的SDK"></a>测试自己的SDK</h2><p>新建项目   在pom.xml中引入自己的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.guoAPI&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;myapi-sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>然后在application.yml中配置accessKey和secretKey  以及端口和地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8123</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /api</span><br><span class="line">guoapi:</span><br><span class="line">  client:</span><br><span class="line">    access-key: </span><br><span class="line">    secret-key: </span><br></pre></td></tr></table></figure><p>然后在controller包中创建自己的方法  比如NameController   </p><p>最后在此时类中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">class TestMysdkApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private GuoApiClint guoApiClint;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        guoApiClint.getNameByGet(&quot;guo&quot;);</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setUsername(&quot;guo1&quot;);</span><br><span class="line">        guoApiClint.getUsernameByPost(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动applicantion项目启动类    然后在启动测试类</p><p>参考<a href="%5B%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://space.bilibili.com/12890453)">@鱼皮</a>的yuapi</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyAPI项目（一）</title>
      <link href="/2023/04/06/MyAPI(%E4%B8%80)/"/>
      <url>/2023/04/06/MyAPI(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="MyAPI-项目（一）"><a href="#MyAPI-项目（一）" class="headerlink" title="MyAPI 项目（一）"></a>MyAPI 项目（一）</h1><h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1. 项目介绍"></a>1. 项目介绍</h2><p>提供API 接口的调用平台</p><p>用户可以注册登录，开通接口的调用权限   还可以使用接口，并且每次调用会进行统计</p><p>管理员   可以发布接口  下线接口 接入接口  并且能够可视化接口的调用情况、数据。</p><h2 id="2-业务模型"><a href="#2-业务模型" class="headerlink" title="2. 业务模型"></a>2. 业务模型</h2><p><a href="https://imgse.com/i/ppI2tMV"><img src="https://s1.ax1x.com/2023/04/06/ppI2tMV.png" alt="ppI2tMV.png"></a></p><h2 id="3-项目技术"><a href="#3-项目技术" class="headerlink" title="3. 项目技术"></a>3. 项目技术</h2><h3 id="前段"><a href="#前段" class="headerlink" title="前段"></a>前段</h3><p> ant design pro  （开箱即用的前端框架）</p><p><strong>React</strong></p><p><strong>（React是用于构建用户界面的JavaScript库，起源于Facebook的内部项目用于架设Instagram的网站。）</strong></p><p><strong>（特点：</strong></p><p><strong>1.简单</strong><br> <strong>简单的表述任意时间点你的应用应该是什么样子的，React将会自动的管理UI界面更新当数据发生变化的时候。</strong></p><p><strong>2.声明式</strong><br> <strong>在数据发生变化的时候，React从概念上讲与点击了F5一样，实际上它仅仅是更新了变化的一部分而已。</strong><br> <strong>React是关于构造可重用组件的，实际上，使用React你做的仅仅是构建组建。通过封装，使得组件代码复用、测试以及关注点分离更加容易。）</strong></p><p>Umi （脚手架）</p><p>Umi Request(Axios的封装)</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p> spring boot 模版（其中整合了各种技术 ）</p><p>Spring Boot Starter  （SDK开发）</p><p><a href="https://imgse.com/i/ppIRMy6"><img src="https://s1.ax1x.com/2023/04/06/ppIRMy6.png" alt="ppIRMy6.png"></a></p><h2 id="4-项目初始化"><a href="#4-项目初始化" class="headerlink" title="4. 项目初始化"></a>4. 项目初始化</h2><h4 id="技术软件版本"><a href="#技术软件版本" class="headerlink" title="技术软件版本"></a>技术软件版本</h4><p>node 18.14.2</p><p>spring boot  2.7.0 </p><h4 id="前端初始化（Ant-Design-Pro初始化）"><a href="#前端初始化（Ant-Design-Pro初始化）" class="headerlink" title="前端初始化（Ant Design Pro初始化）"></a>前端初始化（Ant Design Pro初始化）</h4><ol><li>使用node安装Ant Design Pro</li></ol><p>​使用语句 </p><p><a href="https://imgse.com/i/ppIR3wD"><img src="https://s1.ax1x.com/2023/04/06/ppIR3wD.png" alt="ppIR3wD.png"></a></p><ol start="2"><li><p>创建文件夹   并在路径中  cmd 启动</p></li><li><p>创建项目</p><p>输入 pro create MyAPI  </p><p>选择 umi@4</p></li><li><p>用vcode 或者 WebStorm 打开文件夹</p></li><li><p>在终端中安装依赖      yarn  或者 npm install</p></li><li><p>在package.json 中  点击start 启动项目</p></li></ol><h4 id="后端初始化"><a href="#后端初始化" class="headerlink" title="后端初始化"></a>后端初始化</h4><h5 id="使用SpringBoot项目初始化模版（或者在IDEA中创建项目-然后在引入依赖）"><a href="#使用SpringBoot项目初始化模版（或者在IDEA中创建项目-然后在引入依赖）" class="headerlink" title="使用SpringBoot项目初始化模版（或者在IDEA中创建项目  然后在引入依赖）"></a>使用SpringBoot项目初始化模版（或者在IDEA中创建项目  然后在引入依赖）</h5><p><a href="https://imgse.com/i/ppIRYYd"><img src="https://s1.ax1x.com/2023/04/06/ppIRYYd.png" alt="ppIRYYd.png"></a></p><ol><li>先安装依赖</li><li>修改项目名称  修改连接数据库的密码 以及数据库名称</li></ol><h2 id="5-创建数据库表"><a href="#5-创建数据库表" class="headerlink" title="5. 创建数据库表"></a>5. 创建数据库表</h2><h3 id="创建用户表"><a href="#创建用户表" class="headerlink" title="创建用户表"></a>创建用户表</h3><p><a href="https://imgse.com/i/ppIRBm8"><img src="https://s1.ax1x.com/2023/04/06/ppIRBm8.png" alt="ppIRBm8.png"></a></p><h3 id="创建接口信息表"><a href="#创建接口信息表" class="headerlink" title="创建接口信息表"></a>创建接口信息表</h3><p><a href="https://imgse.com/i/ppIRykQ"><img src="https://s1.ax1x.com/2023/04/06/ppIRykQ.png" alt="ppIRykQ.png"></a></p><h3 id="创建用户调用接口关系表"><a href="#创建用户调用接口关系表" class="headerlink" title="创建用户调用接口关系表"></a>创建用户调用接口关系表</h3><p><a href="https://imgse.com/i/ppIR2pn"><img src="https://s1.ax1x.com/2023/04/06/ppIR2pn.png" alt="ppIR2pn.png"></a></p><h3 id="插入假数据"><a href="#插入假数据" class="headerlink" title="插入假数据"></a>插入假数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;许擎宇&#x27;, &#x27;薛聪健&#x27;, &#x27;www.cary-king.net&#x27;, &#x27;潘博涛&#x27;, &#x27;谭聪健&#x27;, 0, &#x27;石炫明&#x27;, 9500534531);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;陆弘文&#x27;, &#x27;白志强&#x27;, &#x27;www.leslee-kuhn.net&#x27;, &#x27;潘懿轩&#x27;, &#x27;马鸿涛&#x27;, 0, &#x27;陈峻熙&#x27;, 3982575846);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;毛建辉&#x27;, &#x27;罗文&#x27;, &#x27;www.rosaria-kilback.io&#x27;, &#x27;冯子默&#x27;, &#x27;彭哲瀚&#x27;, 0, &#x27;赵远航&#x27;, 121776355);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;彭雨泽&#x27;, &#x27;蔡煜祺&#x27;, &#x27;www.norris-bergstrom.biz&#x27;, &#x27;董思源&#x27;, &#x27;田晓博&#x27;, 0, &#x27;潘擎宇&#x27;, 740);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;傅志强&#x27;, &#x27;陈梓晨&#x27;, &#x27;www.jordan-reinger.com&#x27;, &#x27;金志强&#x27;, &#x27;熊锦程&#x27;, 0, &#x27;邓睿渊&#x27;, 35542559);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;吕黎昕&#x27;, &#x27;孔越彬&#x27;, &#x27;www.fe-okon.info&#x27;, &#x27;万伟宸&#x27;, &#x27;林昊然&#x27;, 0, &#x27;孟荣轩&#x27;, 1445);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;夏雪松&#x27;, &#x27;许子骞&#x27;, &#x27;www.lashawna-legros.co&#x27;, &#x27;蔡昊然&#x27;, &#x27;胡鹏涛&#x27;, 0, &#x27;钟立辉&#x27;, 34075514);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;严钰轩&#x27;, &#x27;阎志泽&#x27;, &#x27;www.kay-funk.biz&#x27;, &#x27;莫皓轩&#x27;, &#x27;郭黎昕&#x27;, 0, &#x27;龚天宇&#x27;, 70956);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;萧嘉懿&#x27;, &#x27;曹熠彤&#x27;, &#x27;www.margarette-lindgren.biz&#x27;, &#x27;田泽洋&#x27;, &#x27;邓睿渊&#x27;, 0, &#x27;梁志强&#x27;, 98);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;杜驰&#x27;, &#x27;冯思源&#x27;, &#x27;www.vashti-auer.org&#x27;, &#x27;黎健柏&#x27;, &#x27;武博文&#x27;, 0, &#x27;李伟宸&#x27;, 9);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;史金鑫&#x27;, &#x27;蔡鹏涛&#x27;, &#x27;www.diann-keebler.org&#x27;, &#x27;徐烨霖&#x27;, &#x27;阎建辉&#x27;, 0, &#x27;李烨伟&#x27;, 125);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;林炫明&#x27;, &#x27;贾旭尧&#x27;, &#x27;www.dotty-kuvalis.io&#x27;, &#x27;梁雨泽&#x27;, &#x27;龙伟泽&#x27;, 0, &#x27;许智渊&#x27;, 79998);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;何钰轩&#x27;, &#x27;赖智宸&#x27;, &#x27;www.andy-adams.net&#x27;, &#x27;崔思淼&#x27;, &#x27;白鸿煊&#x27;, 0, &#x27;邵振家&#x27;, 7167482751);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;魏志强&#x27;, &#x27;于立诚&#x27;, &#x27;www.ione-aufderhar.biz&#x27;, &#x27;朱懿轩&#x27;, &#x27;万智渊&#x27;, 0, &#x27;唐昊强&#x27;, 741098);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;严君浩&#x27;, &#x27;金胤祥&#x27;, &#x27;www.duane-boyle.org&#x27;, &#x27;雷昊焱&#x27;, &#x27;侯思聪&#x27;, 0, &#x27;郝思&#x27;, 580514);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;姚皓轩&#x27;, &#x27;金鹏&#x27;, &#x27;www.lyda-klein.biz&#x27;, &#x27;杜昊强&#x27;, &#x27;邵志泽&#x27;, 0, &#x27;冯鸿涛&#x27;, 6546);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;廖驰&#x27;, &#x27;沈泽洋&#x27;, &#x27;www.consuelo-sipes.info&#x27;, &#x27;彭昊然&#x27;, &#x27;邓耀杰&#x27;, 0, &#x27;周彬&#x27;, 7761037);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;赖智渊&#x27;, &#x27;邓志泽&#x27;, &#x27;www.emerson-mann.co&#x27;, &#x27;熊明哲&#x27;, &#x27;贺哲瀚&#x27;, 0, &#x27;田鹏&#x27;, 381422);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;许涛&#x27;, &#x27;陆致远&#x27;, &#x27;www.vella-ankunding.name&#x27;, &#x27;贾哲瀚&#x27;, &#x27;莫昊焱&#x27;, 0, &#x27;袁越彬&#x27;, 4218096);</span><br><span class="line">insert into guoapi.`interface_info` (`name`, `description`, `url`, `requestHeader`, `responseHeader`, `status`, `method`, `userId`) values (&#x27;吕峻熙&#x27;, &#x27;沈鹏飞&#x27;, &#x27;www.shari-reichel.org&#x27;, &#x27;郭鸿煊&#x27;, &#x27;覃烨霖&#x27;, 0, &#x27;熊黎昕&#x27;, 493);</span><br></pre></td></tr></table></figure><p>对interface_info 运行上面的mysql 语句  插入假数据</p><h2 id="6-使用Mybatis-plus-X插件"><a href="#6-使用Mybatis-plus-X插件" class="headerlink" title="6.使用Mybatis-plus-X插件"></a>6.使用Mybatis-plus-X插件</h2><p>对interface_info使用Mybatis-plus-X 插件生成对应的文件</p><p>然后将</p><p>domain</p><p>mapper</p><p>service</p><p>分别转移到对应的文件里面   重构一下</p><h2 id="7-创建interfaceinfo"><a href="#7-创建interfaceinfo" class="headerlink" title="7.创建interfaceinfo"></a>7.创建interfaceinfo</h2><p>在model.dto文件下创建interfaceinfo（包名为全小写）</p><p>分别在里面创建接口请求</p><p><a href="https://imgse.com/i/ppIRRlq"><img src="https://s1.ax1x.com/2023/04/06/ppIRRlq.png" alt="ppIRRlq.png"></a></p><p>接口添加请求    接口信息查询请求  接口上传请求</p><p>在里面编写添加接口时需要填写的信息</p><p>在里面编写查询接口时需要查询的信息</p><p>在里面编写上传接口时需要上传的信息</p><h2 id="8-前端"><a href="#8-前端" class="headerlink" title="8.前端"></a>8.前端</h2><h3 id="使用openAPI"><a href="#使用openAPI" class="headerlink" title="使用openAPI"></a>使用openAPI</h3><p>使用Umi 的openAPI按照规范自动生成</p><p><a href="https://imgse.com/i/ppIRfXV"><img src="https://s1.ax1x.com/2023/04/06/ppIRfXV.png" alt="ppIRfXV.png"></a></p><p>然后调整前端  ant design pro  使用我们生成的接口。</p><p>参考<a href="%5B%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://space.bilibili.com/12890453)">@鱼皮</a>的yuapi</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
